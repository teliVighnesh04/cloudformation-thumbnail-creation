AWSTemplateFormatVersion: "2010-09-09"
Description: This template creates thumbnail of objects uploaded in s3 bucket

Parameters:
  SourceBucketName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9.-]+$
    ConstraintDescription: Enter unique bucket name

  CodeBucketName:
    Type: String
    AllowedPattern: ^[a-zA-Z0-9.-]+$
    ConstraintDescription: Enter bucket name where code is stored

Resources:
  MasterBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref SourceBucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:Put
            Function: !GetAtt ThumbnailCreationFunction.Arn
    DeletionPolicy: Delete

  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${SourceBucketName}-resized"
    DeletionPolicy: Delete

  S3CustomResource:
    Type: Custom::S3CustomResource
    Properties:
      ServiceToken: !GetAtt DeleteBucketFunction.Arn
      bucket_name:
        - !Ref MasterBucket
        - !Ref OutputBucket

  LambdaS3Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaS3ThumbnailCreationRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - !Sub "arn:aws:s3:::${CodeBucketName}/*"
                  - !Sub "arn:aws:s3:::${SourceBucketName}/*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource:
                  - !Sub "arn:aws:s3:::${SourceBucketName}-resized/*"
          PolicyName: LambdaS3ThumbnilCreationPolicy

  BucketDeletionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: S3BucketDeletionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:List*
                Resource:
                  - !Sub "arn:aws:s3:::${SourceBucketName}"
                  - !Sub "arn:aws:s3:::${SourceBucketName}/*"
                  - !Sub "arn:aws:s3:::${SourceBucketName}-resized"
                  - !Sub "arn:aws:s3:::${SourceBucketName}-resized/*"
          PolicyName: DeleteStackBucketPolicy
        - PolicyDocument:
            Statement:
              - Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
            Version: "2012-10-17"
          PolicyName: CustomBucketDeletionPolicy

  ThumbnailCreationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Function creates thumbnil uploaded in s3 bucket
      FunctionName: Thumbnil-function
      Handler: lambda_function.lambda_handler
      Runtime: python3.9
      Code:
        S3Bucket: !Ref CodeBucketName
        S3Key: lambda_function.zip
      Role: !GetAtt LambdaS3Role.Arn
      Timeout: 360

  DeleteBucketFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: "Empty an S3 bucket!"
      FunctionName: DeleteStackBucketFunction
      Handler: index.handler
      Role: !GetAtt BucketDeletionRole.Arn
      Timeout: 360
      Runtime: python3.9
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          ### cfnresponse module help in sending responses to CloudFormation
          ### instead of writing your own code

          def handler(event, context):
              # Get request type
              the_event = event['RequestType']        
              print("The event is: ", str(the_event))

              response_data = {}
              s3 = boto3.client('s3')

              # Retrieve parameters (bucket name)
              bucket_name = event['ResourceProperties']['bucket_name']
              print(bucket_name)
              try:
                  if the_event == 'Delete':
                    print("Deleting S3 content...")
                    b_operator = boto3.resource('s3')
                    for bucket in bucket_name:
                      b_operator.Bucket(str(bucket)).objects.all().delete()

                  # Everything OK... send the signal back
                  print("Execution succesfull!")
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data)
              except Exception as e:
                  print("Execution failed...")
                  print(str(e))
                  response_data['Data'] = str(e)
                  cfnresponse.send(event, context, cfnresponse.FAILED, response_data)

  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt ThumbnailCreationFunction.Arn
      Action: lambda:InvokeFunction
      Principal: s3.amazonaws.com
      SourceAccount: !Ref "AWS::AccountId"
      SourceArn: !Sub "arn:aws:s3:::${SourceBucketName}"
